@model IEnumerable<TrialsServerArchive.Models.Objects.SampleType>
@inject SignInManager<ApplicationUser> SignInManager

@{
    ViewData["Title"] = "Типы образцов";
}

<div class="container">
    @if (SignInManager.IsSignedIn(User))
    {
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>@ViewData["Title"]</h1>
            <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createTypeModal">
                <i class="bi bi-plus-circle"></i> Создать тип
            </button>
        </div>
    }

    <!-- Оповещения об успехе/ошибке -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="card">
        <div class="card-body">
            <table class="table table-hover">
                <thead class="table-light">
                    <tr>
                        <th>ID</th>
                        <th>Название</th>
                        <th>Форма</th>
                        <th>Описание</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>@item.Id</td>
                            <td>@item.Name</td>
                            <td>@(GetShapeName(item.Name))</td>
                            <td>@(item.Description ?? "-")</td>
                            @if (SignInManager.IsSignedIn(User))
                            {
                                <td>
                                
                                    <div class="btn-group btn-group-sm">
                                        <button class="btn btn-outline-primary edit-btn" 
                                                data-id="@item.Id"
                                                data-bs-toggle="modal" 
                                                data-bs-target="#editTypeModal">
                                            <i class="bi bi-pencil"></i>
                                        </button>
                                        <button class="btn btn-outline-danger delete-btn" 
                                                data-id="@item.Id"
                                                data-bs-toggle="modal" 
                                                data-bs-target="#deleteTypeModal">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Модальное окно создания типа -->
<div class="modal fade" id="createTypeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Создать новый тип</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form id="createTypeForm" method="post" asp-action="Create">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div id="createTypeErrors" class="alert alert-danger d-none"></div>
                    
                    <div class="mb-3">
                        <label class="form-label">Название типа *</label>
                        <input type="text" class="form-control" name="Name" id="typeNameInput" 
                               placeholder="К100, П280, Ц и т.д." required>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Форма образца</label>
                        <select class="form-select" id="shapeType">
                            <option value="">Выберите форму</option>
                            <option value="Куб">Куб</option>
                            <option value="Призма">Призма</option>
                            <option value="Цилиндр">Цилиндр</option>
                        </select>
                        <div class="form-text" id="autoShapeInfo"></div>
                    </div>
                    
                    <div class="mb-3">
                        <label class="form-label">Описание</label>
                        <textarea name="Description" class="form-control" rows="3" 
                                  placeholder="Дополнительная информация о типе образца"></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                    <button type="submit" class="btn btn-primary">Создать</button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Модальное окно редактирования типа -->
<div class="modal fade" id="editTypeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Редактировать тип</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div id="editTypeContent">
                <!-- Контент будет загружен через AJAX -->
            </div>
        </div>
    </div>
</div>

<!-- Модальное окно подтверждения удаления -->
<div class="modal fade" id="deleteTypeModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Подтверждение удаления</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p>Вы уверены, что хотите удалить этот тип образца?</p>
                <p class="text-danger"><strong>Внимание:</strong> Если тип используется в образцах, удаление невозможно.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Отмена</button>
                <form id="deleteTypeForm" method="post">
                    <button type="submit" class="btn btn-danger">Удалить</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(function () {
            // Функция автоопределения формы по первой букве названия
            function autoDetectShape(name) {
                if (!name) return '';
                
                const firstChar = name.charAt(0).toUpperCase();
                switch (firstChar) {
                    case 'К': return 'Куб';
                    case 'П': return 'Призма';
                    case 'Ц': return 'Цилиндр';
                    default: return '';
                }
            }
            
            // Автоопределение формы при вводе названия
            $('#typeNameInput').on('input', function() {
                const name = $(this).val().trim();
                const detectedShape = autoDetectShape(name);
                
                if (detectedShape) {
                    // Если поле формы не выбрано - устанавливаем автоопределение
                    if (!$('#shapeType').val()) {
                        $('#shapeType').val(detectedShape);
                        $('#autoShapeInfo').text(`Автоопределена форма: ${detectedShape}`);
                    }
                } else {
                    $('#autoShapeInfo').text('');
                }
            });
            
            // Сброс автоопределения при ручном выборе формы
            $('#shapeType').change(function() {
                $('#autoShapeInfo').text('');
            });
            
            // Обработка создания типа
            $('#createTypeForm').submit(function(e) {
                e.preventDefault();
                const form = $(this);
                const submitBtn = form.find('button[type="submit"]');
                
                submitBtn.html('<span class="spinner-border spinner-border-sm"></span> Сохранение...');
                submitBtn.prop('disabled', true);
                $('#createTypeErrors').addClass('d-none').empty();
                
                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function(response) {
                        if (response.success) {
                            $('#createTypeModal').modal('hide');
                            location.reload();
                        } else {
                            showFormErrors('#createTypeErrors', response);
                        }
                    },
                    error: function(xhr) {
                        $('#createTypeErrors').html(
                            '<li>Ошибка при создании типа</li>'
                        ).removeClass('d-none');
                    },
                    complete: function() {
                        submitBtn.html('Создать');
                        submitBtn.prop('disabled', false);
                    }
                });
            });
            
            // Загрузка формы редактирования
            $('.edit-btn').click(function() {
                const typeId = $(this).data('id');
                $('#editTypeContent').load('@Url.Action("Edit", "Types")/' + typeId);
            });
            
            // Обработка удаления
            $('#deleteTypeModal').on('show.bs.modal', function(event) {
                const button = $(event.relatedTarget);
                const typeId = button.data('id');
                const form = $('#deleteTypeForm');
                
                form.attr('action', '@Url.Action("Delete", "Types")/' + typeId);
            });
            
            // Отправка формы удаления
            $('#deleteTypeForm').submit(function(e) {
                e.preventDefault();
                const form = $(this);
                const submitBtn = form.find('button[type="submit"]');
                
                submitBtn.html('<span class="spinner-border spinner-border-sm"></span> Удаление...');
                submitBtn.prop('disabled', true);
                
                $.ajax({
                    url: form.attr('action'),
                    type: 'POST',
                    data: form.serialize(),
                    success: function(response) {
                        if (response.success) {
                            $('#deleteTypeModal').modal('hide');
                            location.reload();
                        } else {
                            alert(response.message || 'Ошибка при удалении');
                        }
                    },
                    error: function() {
                        alert('Произошла ошибка при удалении');
                    },
                    complete: function() {
                        submitBtn.html('Удалить');
                        submitBtn.prop('disabled', false);
                    }
                });
            });
            
            // Функция для отображения ошибок формы
            function showFormErrors(container, response) {
                let errorHtml = '<ul>';
                
                if (response.errors && response.errors.length > 0) {
                    response.errors.forEach(error => {
                        errorHtml += `<li>${error}</li>`;
                    });
                } else if (response.message) {
                    errorHtml += `<li>${response.message}</li>`;
                } else {
                    errorHtml += '<li>Произошла ошибка при обработке запроса</li>';
                }
                
                errorHtml += '</ul>';
                $(container).html(errorHtml).removeClass('d-none');
            }
        });
    </script>
}

@functions {
    public string GetShapeName(string typeName)
    {
        if (string.IsNullOrEmpty(typeName)) return "Не определена";
        
        var firstChar = typeName[0].ToString().ToUpper();
        return firstChar switch
        {
            "К" => "Куб",
            "П" => "Призма",
            "Ц" => "Цилиндр",
            _ => "Не определена"
        };
    }
}