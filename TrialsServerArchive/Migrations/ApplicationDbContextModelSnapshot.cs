// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrialsServerArchive.Data;

#nullable disable

namespace TrialsServerArchive.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.BaseObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Density")
                        .HasColumnType("double precision");

                    b.Property<double>("DimensionA")
                        .HasColumnType("double precision");

                    b.Property<double>("DimensionB")
                        .HasColumnType("double precision");

                    b.Property<double?>("DimensionC")
                        .HasColumnType("double precision");

                    b.Property<int>("JournalType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ObjectType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<DateTime>("RecordDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SampleCreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SampleTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("SeriesName")
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("SampleTypeId");

                    b.ToTable("Objects");

                    b.HasDiscriminator<string>("ObjectType").HasValue("BaseObject");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.FurnaceProgram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FurnacePrograms");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.SamplePhoto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SampleId");

                    b.ToTable("SamplePhotos");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.SampleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShapeType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SampleTypes");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.StoragePlace", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StoragePlaces");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Tooling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ReconciliationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VerifiedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Toolings");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.TrialTooling", b =>
                {
                    b.Property<int>("TrialObjectId")
                        .HasColumnType("integer");

                    b.Property<int>("ToolingId")
                        .HasColumnType("integer");

                    b.HasKey("TrialObjectId", "ToolingId");

                    b.HasIndex("ToolingId");

                    b.ToTable("TrialToolings");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.Sample", b =>
                {
                    b.HasBaseType("TrialsServerArchive.Models.Objects.BaseObject");

                    b.HasDiscriminator().HasValue("Sample");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.TrialObject", b =>
                {
                    b.HasBaseType("TrialsServerArchive.Models.Objects.BaseObject");

                    b.Property<double?>("BreakingLoad")
                        .HasColumnType("double precision");

                    b.Property<double?>("DensityAfterTest")
                        .HasColumnType("double precision");

                    b.Property<double?>("DimensionAAfterTest")
                        .HasColumnType("double precision");

                    b.Property<double?>("DimensionBAfterTest")
                        .HasColumnType("double precision");

                    b.Property<double?>("DimensionCAfterTest")
                        .HasColumnType("double precision");

                    b.Property<int?>("FurnaceProgramId")
                        .HasColumnType("integer");

                    b.Property<string>("MU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MUStar")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SampleId")
                        .HasColumnType("integer");

                    b.Property<int?>("StoragePlaceId")
                        .HasColumnType("integer");

                    b.Property<string>("TestMode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TestedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("TestingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double?>("TestingHumidity")
                        .HasColumnType("double precision");

                    b.Property<double?>("TestingTemperature")
                        .HasColumnType("double precision");

                    b.Property<double?>("WeightAfterTest")
                        .HasColumnType("double precision");

                    b.Property<double?>("WetCoefficient")
                        .HasColumnType("double precision");

                    b.HasIndex("FurnaceProgramId");

                    b.HasIndex("StoragePlaceId");

                    b.HasDiscriminator().HasValue("TrialObject");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.ObjectInJournal", b =>
                {
                    b.HasBaseType("TrialsServerArchive.Models.Objects.TrialObject");

                    b.Property<DateTime>("ArchiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ArchivedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("ObjectInJournal");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.BaseObject", b =>
                {
                    b.HasOne("TrialsServerArchive.Models.Objects.SampleType", "SampleType")
                        .WithMany()
                        .HasForeignKey("SampleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SampleType");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.SamplePhoto", b =>
                {
                    b.HasOne("TrialsServerArchive.Models.Objects.BaseObject", "Sample")
                        .WithMany("Photos")
                        .HasForeignKey("SampleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sample");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.TrialTooling", b =>
                {
                    b.HasOne("TrialsServerArchive.Models.Tooling", "Tooling")
                        .WithMany("TrialLinks")
                        .HasForeignKey("ToolingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrialsServerArchive.Models.Objects.TrialObject", "TrialObject")
                        .WithMany("ToolingLinks")
                        .HasForeignKey("TrialObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tooling");

                    b.Navigation("TrialObject");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.TrialObject", b =>
                {
                    b.HasOne("TrialsServerArchive.Models.Objects.FurnaceProgram", "FurnaceProgram")
                        .WithMany()
                        .HasForeignKey("FurnaceProgramId");

                    b.HasOne("TrialsServerArchive.Models.Objects.StoragePlace", "StoragePlace")
                        .WithMany()
                        .HasForeignKey("StoragePlaceId");

                    b.Navigation("FurnaceProgram");

                    b.Navigation("StoragePlace");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.BaseObject", b =>
                {
                    b.Navigation("Photos");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Tooling", b =>
                {
                    b.Navigation("TrialLinks");
                });

            modelBuilder.Entity("TrialsServerArchive.Models.Objects.TrialObject", b =>
                {
                    b.Navigation("ToolingLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
